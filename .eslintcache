[{"C:\\Users\\kings\\OneDrive\\Desktop\\practice\\React\\contactinfo\\src\\index.js":"1","C:\\Users\\kings\\OneDrive\\Desktop\\practice\\React\\contactinfo\\src\\serviceWorker.js":"2","C:\\Users\\kings\\OneDrive\\Desktop\\practice\\React\\contactinfo\\src\\App.js":"3","C:\\Users\\kings\\OneDrive\\Desktop\\practice\\React\\contactinfo\\src\\utils\\config.js":"4","C:\\Users\\kings\\OneDrive\\Desktop\\practice\\React\\contactinfo\\src\\pages\\PageNotFound.js":"5","C:\\Users\\kings\\OneDrive\\Desktop\\practice\\React\\contactinfo\\src\\pages\\Contacts.js":"6","C:\\Users\\kings\\OneDrive\\Desktop\\practice\\React\\contactinfo\\src\\layout\\Header.js":"7","C:\\Users\\kings\\OneDrive\\Desktop\\practice\\React\\contactinfo\\src\\pages\\AddContact.js":"8","C:\\Users\\kings\\OneDrive\\Desktop\\practice\\React\\contactinfo\\src\\pages\\ViewContact.js":"9","C:\\Users\\kings\\OneDrive\\Desktop\\practice\\React\\contactinfo\\src\\layout\\Footer.js":"10","C:\\Users\\kings\\OneDrive\\Desktop\\practice\\React\\contactinfo\\src\\context\\reducer.js":"11","C:\\Users\\kings\\OneDrive\\Desktop\\practice\\React\\contactinfo\\src\\context\\Context.js":"12","C:\\Users\\kings\\OneDrive\\Desktop\\practice\\React\\contactinfo\\src\\context\\action.types.js":"13","C:\\Users\\kings\\OneDrive\\Desktop\\practice\\React\\contactinfo\\src\\components\\Contact.js":"14"},{"size":503,"mtime":1585296516000,"results":"15","hashOfConfig":"16"},{"size":5086,"mtime":1585296516000,"results":"17","hashOfConfig":"16"},{"size":2756,"mtime":1589890773817,"results":"18","hashOfConfig":"16"},{"size":578,"mtime":1589890722988,"results":"19","hashOfConfig":"16"},{"size":203,"mtime":1589890758609,"results":"20","hashOfConfig":"16"},{"size":1780,"mtime":1589890593482,"results":"21","hashOfConfig":"16"},{"size":499,"mtime":1589783606843,"results":"22","hashOfConfig":"16"},{"size":8590,"mtime":1591363779642,"results":"23","hashOfConfig":"16"},{"size":1954,"mtime":1610018977614,"results":"24","hashOfConfig":"16"},{"size":239,"mtime":1589783599624,"results":"25","hashOfConfig":"16"},{"size":763,"mtime":1589783320292,"results":"26","hashOfConfig":"16"},{"size":126,"mtime":1589890950843,"results":"27","hashOfConfig":"16"},{"size":257,"mtime":1589782743757,"results":"28","hashOfConfig":"16"},{"size":3755,"mtime":1589889373021,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1qhx0l8",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\kings\\OneDrive\\Desktop\\practice\\React\\contactinfo\\src\\index.js",[],["62","63"],"C:\\Users\\kings\\OneDrive\\Desktop\\practice\\React\\contactinfo\\src\\serviceWorker.js",[],"C:\\Users\\kings\\OneDrive\\Desktop\\practice\\React\\contactinfo\\src\\App.js",["64","65","66","67"],"import React, { useReducer, useEffect } from \"react\";\n\nimport { Container, Col, Row } from \"reactstrap\";\n\n// react-router-dom3\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\n// react toastify stuffs\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\n// bootstrap css\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\n// firebase stuffs\n//TODO: import firebase config and firebase database\nimport {firebaseConfig} from \"./utils/config\"\nimport firebase from \"firebase/app\"\nimport \"firebase/database\"\nimport \"firebase/storage\"\n\n// components\nimport AddContact from \"./pages/AddContact\";\nimport Contacts from \"./pages/Contacts\";\nimport Header from \"./layout/Header\";\nimport Footer from \"./layout/Footer\";\nimport ViewContact from \"./pages/ViewContact\";\nimport PageNotFound from \"./pages/PageNotFound\";\n\n// context api stuffs\n//TODO: import reducers and contexts\nimport reducer from \"./context/reducer\"\nimport {ContactContext} from \"./context/Context\"\nimport {SET_CONTACT,SET_LOADING} from \"./context/action.types\"\n\n//initlizeing firebase app with the firebase config which are in ./utils/firebaseConfig\n//TODO: initialize FIREBASE\nfirebase.initializeApp(firebaseConfig)\n\n// first state to provide in react reducer\nconst initialState = {\n  contacts: [],\n  contact: {},\n  contactToUpdate: null,\n  contactToUpdateKey: null,\n  isLoading: false\n};\n\nconst App = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  // will get contacts from firebase and set it on state contacts array\n  const getContacts = async () => {\n    // TODO: load existing data\n    dispatch({\n      type:SET_LOADING,\n      payload:true\n    })\n\n    const contactRef=await firebase.database().ref('/contacts')\n    contactRef.on('value',snapshot=>{\n      dispatch({\n        type:SET_CONTACT,\n        payload:snapshot.val()\n      })\n    })\n     dispatch({\n       type: SET_LOADING,\n       payload: false,\n     });\n  };\n\n  // getting contact  when component did mount\n  useEffect(() => {\n    //FIXME: call methods if needed\n    getContacts();\n  }, []);\n\n  return (\n    <Router>\n      {/* FIXME: Provider is not configured */}\n      <ContactContext.Provider value={{state,dispatch}}>\n        <ToastContainer />\n        <Header />\n        <Container>\n          <Switch>\n            <Route exact path=\"/contact/add\" component={AddContact} />\n            <Route exact path=\"/contact/view\" component={ViewContact} />\n            <Route exact path=\"/\" component={Contacts} />\n            <Route exact path=\"*\" component={PageNotFound} />\n          </Switch>\n        </Container>\n\n        <Footer />\n      </ContactContext.Provider>\n    </Router>\n  );\n};\n\nexport default App;\n","C:\\Users\\kings\\OneDrive\\Desktop\\practice\\React\\contactinfo\\src\\utils\\config.js",[],"C:\\Users\\kings\\OneDrive\\Desktop\\practice\\React\\contactinfo\\src\\pages\\PageNotFound.js",[],"C:\\Users\\kings\\OneDrive\\Desktop\\practice\\React\\contactinfo\\src\\pages\\Contacts.js",[],"C:\\Users\\kings\\OneDrive\\Desktop\\practice\\React\\contactinfo\\src\\layout\\Header.js",[],"C:\\Users\\kings\\OneDrive\\Desktop\\practice\\React\\contactinfo\\src\\pages\\AddContact.js",["68"],"// https://firebase.google.com/docs/storage/web/upload-files#full_example\n// https://www.npmjs.com/package/browser-image-resizer#asyncawait\n\nimport React, { useState, useContext, useEffect } from \"react\";\nimport firebase from \"firebase/app\";\n\nimport {\n  Container,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Button,\n  Spinner,\n  Row,\n  Col,\n} from \"reactstrap\";\n\n// to compress image before uploading to the server\nimport { readAndCompressImage } from \"browser-image-resizer\";\n\n// configs for image resizing\n//TODO: DONE: add image configurations\nimport { imageConfig } from \"../utils/config\";\n\nimport { MdAddCircleOutline } from \"react-icons/md\";\n\nimport { v4 } from \"uuid\";\n\n// context stuffs\nimport { ContactContext } from \"../context/Context\";\nimport { CONTACT_TO_UPDATE } from \"../context/action.types\";\n\nimport { useHistory } from \"react-router-dom\";\n\nimport { toast } from \"react-toastify\";\n\nconst AddContact = () => {\n  // destructuring state and dispatch from context state\n  const { state, dispatch } = useContext(ContactContext);\n\n  const { contactToUpdate, contactToUpdateKey } = state;\n\n  // history hooks from react router dom to send to different page\n  const history = useHistory();\n\n  // simple state of all component\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\n  const [address, setAddress] = useState(\"\");\n  const [isUploading, setIsUploading] = useState(false);\n  const [downloadUrl, setDownloadUrl] = useState(null);\n  const [star, setStar] = useState(false);\n  const [isUpdate, setIsUpdate] = useState(false);\n\n  // when their is the contact to update in the Context state\n  // then setting state with the value of the contact\n  // will changes only when the contact to update changes\n  useEffect(() => {\n    if (contactToUpdate) {\n      setName(contactToUpdate.name);\n      setEmail(contactToUpdate.email);\n      setPhoneNumber(contactToUpdate.phoneNumber);\n      setAddress(contactToUpdate.address);\n      setStar(contactToUpdate.star);\n      setDownloadUrl(contactToUpdate.picture);\n\n      // also setting is update to true to make the update action instead the addContact action\n      setIsUpdate(true);\n    }\n  }, [contactToUpdate]);\n\n  // To upload image to firebase and then set the the image link in the state of the app\n  const imagePicker = async (e) => {\n    // TODO: upload image and set D-URL to state\n    try {\n      const file = e.target.files[0];\n      console.log(file)\n      var metadata = {\n        contentType: file.type\n      };\n      let resizedImage = await readAndCompressImage(file, imageConfig);\n      const storageRef = await firebase.storage().ref();\n      var uploadTask = storageRef\n        .child(\"images/\"+ file.name)\n        .put(resizedImage, metadata);\n      uploadTask.on(\n        firebase.storage.TaskEvent.STATE_CHANGED,\n        (snapshot) => {\n          setIsUploading(true);\n          var progress =\n            (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n          switch (snapshot.state) {\n            case firebase.storage.TaskState.PAUSED:\n              setIsUploading(false);\n              console.log(\"Uploading is paused\");\n              break;\n            case firebase.storage.TaskState.RUNNING:\n              console.log(\"Uploading is in progress..\");\n              break;\n\n            default:\n              break;\n          }\n          if (progress === 100) {\n            setIsUploading(false);\n            toast(\"uploaded\", {\n              type: \"success\",\n            });\n          }\n        },\n        (error) => {\n          toast(\"something is wrong in state change\", {\n            type: \"error\",\n          });\n        },\n        () => {\n          uploadTask.snapshot.ref\n            .getDownloadURL()\n            .then((downloadURL) => {\n              setDownloadUrl(downloadURL);\n            })\n            .catch((err) => console.log(err));\n        }\n      );\n    } catch(error) {\n      console.log(error);\n      toast(\"SOMETHING WENT WRONG\", {\n        type: \"error\",\n      });\n    }\n  };\n\n  // setting contact to firebase DB\n  const addContact = async () => {\n    //TODO: add contact method\n    try {\n      firebase\n        .database()\n        .ref(\"contacts/\" + v4())\n        .set({\n          name,\n          email,\n          phoneNumber,\n          address,\n          picture: downloadUrl,\n          star,\n        });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // to handle update the contact when there is contact in state and the user had came from clicking the contact update icon\n  const updateContact = async () => {\n    //TODO: update contact method\n    try {\n      firebase.database().ref('contacts/'+contactToUpdateKey)\n      .set({\n        name,email,phoneNumber,address,picture:downloadUrl,star\n      })\n      \n    } catch (error) {\n      console.log(error);\n      toast(\"Opps..\",{type:\"error\"})\n    }\n  };\n\n  // firing when the user click on submit button or the form has been submitted\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    isUpdate?updateContact():addContact(\n      toast('Success',{type:\"success\"})\n    )\n\n    // isUpdate wll be true when the user came to update the contact\n    // when their is contact then updating and when no contact to update then adding contact\n    //TODO: set isUpdate value\n\n    // to handle the bug when the user visit again to add contact directly by visiting the link\n    dispatch({\n      type: CONTACT_TO_UPDATE,\n      payload: null,\n      key: null,\n    });\n\n    // after adding/updating contact then sending to the contacts\n    // TODO :- also sending when their is any errors\n    history.push(\"/\");\n  };\n\n  // return the spinner when the image has been added in the storage\n  // showing the update / add contact based on the  state\n  return (\n    <Container fluid className=\"mt-5\">\n      <Row>\n        <Col md=\"6\" className=\"offset-md-3 p-2\">\n          <Form onSubmit={handleSubmit}>\n            <div className=\"text-center\">\n              {isUploading ? (\n                <Spinner type=\"grow\" color=\"primary\" />\n              ) : (\n                <div>\n                  <label htmlFor=\"imagepicker\" className=\"\">\n                    <img src={downloadUrl} alt=\"\" className=\"profile\" />\n                  </label>\n                  <input\n                    type=\"file\"\n                    name=\"image\"\n                    id=\"imagepicker\"\n                    accept=\"image/*\"\n                    multiple={true}\n                    onChange={(e) => imagePicker(e)}\n                    className=\"hidden\"\n                  />\n                </div>\n              )}\n            </div>\n\n            <FormGroup>\n              <Input\n                type=\"text\"\n                name=\"name\"\n                id=\"name\"\n                placeholder=\"Name\"\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n              />\n            </FormGroup>\n            <FormGroup>\n              <Input\n                type=\"email\"\n                name=\"email\"\n                id=\"email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                placeholder=\"Email\"\n              />\n            </FormGroup>\n            <FormGroup>\n              <Input\n                type=\"number\"\n                name=\"number\"\n                id=\"phonenumber\"\n                value={phoneNumber}\n                onChange={(e) => setPhoneNumber(e.target.value)}\n                placeholder=\"phone number\"\n              />\n            </FormGroup>\n            <FormGroup>\n              <Input\n                type=\"textarea\"\n                name=\"area\"\n                id=\"area\"\n                value={address}\n                onChange={(e) => setAddress(e.target.value)}\n                placeholder=\"address\"\n              />\n            </FormGroup>\n            <FormGroup check>\n              <Label check>\n                <Input\n                  type=\"checkbox\"\n                  onChange={() => {\n                    setStar(!star);\n                  }}\n                  checked={star}\n                />{\" \"}\n                <span className=\"text-right\">Mark as Star</span>\n              </Label>\n            </FormGroup>\n            <Button\n              type=\"submit\"\n              color=\"primary\"\n              block\n              className=\"text-uppercase\"\n            >\n              {isUpdate ? \"Update Contact\" : \"Add Contact\"}\n            </Button>\n          </Form>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default AddContact;\n","C:\\Users\\kings\\OneDrive\\Desktop\\practice\\React\\contactinfo\\src\\pages\\ViewContact.js",["69","70"],"C:\\Users\\kings\\OneDrive\\Desktop\\practice\\React\\contactinfo\\src\\layout\\Footer.js",[],"C:\\Users\\kings\\OneDrive\\Desktop\\practice\\React\\contactinfo\\src\\context\\reducer.js",["71"],"//TODO: DONE: create contact using all actions\n\nimport {\n  SET_CONTACT,\n  SET_LOADING,\n  CONTACT_TO_UPDATE,\n  SET_SINGLE_CONTACT,\n} from \"./action.types\";\n\n//TODO: DONE: use switch case\nexport default (state, action) => {\n  switch (action.type) {\n    case SET_CONTACT:\n      return action.payload == null\n        ? { ...state, contacts: [] }\n        : { ...state, contacts: action.payload };\n    case SET_LOADING:\n      return { ...state, isLoading: action.payload };\n    case CONTACT_TO_UPDATE:\n      return {\n        ...state,\n        contactToUpdate: action.payload,\n        contactToUpdateKey: action.key,\n      };\n    case SET_SINGLE_CONTACT:\n      return {\n        ...state,\n        contact: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n","C:\\Users\\kings\\OneDrive\\Desktop\\practice\\React\\contactinfo\\src\\context\\Context.js",[],"C:\\Users\\kings\\OneDrive\\Desktop\\practice\\React\\contactinfo\\src\\context\\action.types.js",[],"C:\\Users\\kings\\OneDrive\\Desktop\\practice\\React\\contactinfo\\src\\components\\Contact.js",[],{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":3,"column":21,"nodeType":"78","messageId":"79","endLine":3,"endColumn":24},{"ruleId":"76","severity":1,"message":"80","line":3,"column":26,"nodeType":"78","messageId":"79","endLine":3,"endColumn":29},{"ruleId":"76","severity":1,"message":"81","line":6,"column":50,"nodeType":"78","messageId":"79","endLine":6,"endColumn":54},{"ruleId":"76","severity":1,"message":"82","line":9,"column":26,"nodeType":"78","messageId":"79","endLine":9,"endColumn":31},{"ruleId":"76","severity":1,"message":"83","line":26,"column":10,"nodeType":"78","messageId":"79","endLine":26,"endColumn":28},{"ruleId":"84","severity":1,"message":"85","line":43,"column":15,"nodeType":"86","endLine":47,"endColumn":16},{"ruleId":"84","severity":1,"message":"85","line":52,"column":15,"nodeType":"86","endLine":57,"endColumn":16},{"ruleId":"87","severity":1,"message":"88","line":11,"column":1,"nodeType":"89","endLine":33,"endColumn":3},"no-native-reassign",["90"],"no-negated-in-lhs",["91"],"no-unused-vars","'Col' is defined but never used.","Identifier","unusedVar","'Row' is defined but never used.","'Link' is defined but never used.","'toast' is defined but never used.","'MdAddCircleOutline' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]